/**
 * Spidermix 0.2.0
 * (Tayira)
 */

(function (global) {
  "use strict";

  // Function to lazy-load resources (images and iframes)
  function lazyLoadResources() {
    const lazyElements = document.querySelectorAll(
      "img[data-src], iframe[data-src]"
    );

    lazyElements.forEach((el) => {
      if ("IntersectionObserver" in window) {
        const observer = new IntersectionObserver((entries, observer) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              if (el.tagName === "IMG" || el.tagName === "IFRAME") {
                el.src = el.getAttribute("data-src");
                el.removeAttribute("data-src");
              }
              observer.unobserve(el);
            }
          });
        });
        observer.observe(el);
      } else {
        // Fallback for browsers that don't support IntersectionObserver
        if (el.tagName === "IMG" || el.tagName === "IFRAME") {
          el.src = el.getAttribute("data-src");
          el.removeAttribute("data-src");
        }
      }
    });
  }

  // Function to optimize all resources
  function optimizeAll() {
    // Lazy load resources
    lazyLoadResources();
    // Additional optimizations can be added here
  }

  // Run optimization on DOMContentLoaded
  document.addEventListener("DOMContentLoaded", optimizeAll);

  // Register service worker
  if ("serviceWorker" in navigator) {
    window.addEventListener("load", () => {
      navigator.serviceWorker
        .register("/service-worker.js")
        .then((registration) => {
          console.log(
            "Service Worker registered with scope:",
            registration.scope
          );
        })
        .catch((error) => {
          console.error("Service Worker registration failed:", error);
        });
    });
  }

  // Debounce function
  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Debounced resize event listener
  window.addEventListener(
    "resize",
    debounce(() => {
      // Add code to handle resize event here
    }, 250)
  );

  // Animate function (using requestAnimationFrame)
  function animate() {
    requestAnimationFrame(animate);
  }
  requestAnimationFrame(animate);

  // Expose Spidermix API
  global.spidermix = {
    version: "0.2.0",
    optimizeAll,
  };

  // Add metadata for Wappalyzer detection
  global.spidermix.metadata = {
    name: "Spidermix",
    description: "A lightweight library for optimizing web performance",
    website:
      "https://github.com/TayiraCompany/TayiraCDNS/tree/main/spidermix/0.2.0",
    version: "0.2.0",
  };

  // Add a script tag with a unique identifier for Wappalyzer detection
  const script = document.createElement("script");
  script.src =
    "https://tayiracompany.github.io/TayiraCDNS/spidermix/0.2.0/spidermix.min.js";
  script.id = "spidermix-script";
  document.head.appendChild(script);

  // Reload site at 16h
  const reloadTime = new Date();
  reloadTime.setHours(16, 0, 0, 0);
  const now = new Date();
  const timeDiff = reloadTime.getTime() - now.getTime();
  if (timeDiff > 0) {
    setTimeout(() => {
      window.location.reload();
    }, timeDiff);
  } else {
    window.location.reload();
  }
})(window);
